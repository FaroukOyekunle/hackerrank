Explanation:
1.   Initialization:
    -   I initialize a parent array where each node is its own parent initially.

    -   This represents that each node is in its own disjoint set.

2.  Iterate through edges:
    -   For each edge, we find the root parent of both nodes using the Find function.

    -   If both nodes have the same root parent, it means they are already connected, and adding this edge creates a cycle. Hence, 
    this edge is redundant.

    -   If they have different root parents, we perform a union operation by setting the parent of one root to the other.

3. Find function:

    -   The Find function uses path compression to optimize future queries. It recursively finds the root parent of a node
    and updates the parent array to flatten the tree.

4.  Return the redundant edge:

    -   The first edge that creates a cycle is returned as the redundant edge.

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Example Walkthrough:

Example 1:
Input: edges = [[1,2],[1,3],[2,3]]

    -   Initialize parent = [0, 1, 2, 3].

    -   Process [1,2]: Union 1 and 2. parent = [0, 1, 1, 3].

    -   Process [1,3]: Union 1 and 3. parent = [0, 1, 1, 1].

    -   Process [2,3]: Both 2 and 3 have the same root parent (1). This edge is redundant.

    -   Output: [2,3].

Example 2:
Input: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]

    -   Initialize parent = [0, 1, 2, 3, 4, 5].

    -   Process [1,2]: Union 1 and 2. parent = [0, 1, 1, 3, 4, 5].

    -   Process [2,3]: Union 2 and 3. parent = [0, 1, 1, 1, 4, 5].

    -   Process [3,4]: Union 3 and 4. parent = [0, 1, 1, 1, 1, 5].

    -   Process [1,4]: Both 1 and 4 have the same root parent (1). This edge is redundant.

    -   Output: [1,4].

Complexity:
    -   Time Complexity: O(n⋅α(n)), where n is the number of edges, and α(n) is the inverse Ackermann function
    (very small, nearly constant).

    -   Space Complexity: O(n) for the parent array.